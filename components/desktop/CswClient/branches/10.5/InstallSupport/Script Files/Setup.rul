#include "ifx.h"

prototype FolderBrowse(BYREF STRING, STRING, HWND);
prototype _FileDelete_N_AddLine (STRING, STRING, STRING, HWND);

export prototype DisplayMessage(HWND); 
 
function DisplayMessage(hMSI)   
    // To Do:  Declare local variables.
    STRING szMsg;
    
begin
	szMsg = "CSW Client for ArcGIS Desktop requires ArcGIS 10.5 for Desktop" + 
    		"\nCSW Client for ArcGIS Desktop will not be installed at this time.";
   
    MessageBox ( szMsg, WARNING );   
    
end;
     
     
     
// Function finds and replaces identical text in multiple files
export prototype Fn_FindReplaceBinFiles(HWND);  

function Fn_FindReplaceBinFiles(hMSI)
    STRING  fileArray(2), fromArray(2), toArray(2), TARGET_FILE, svReturnLine, szReplaceStr, szReplaceFrom, properties, svNumString;
    NUMBER  i, nvResult, nvSize, nvLineNum;
    LIST   listID;

    // Add local varaibles here
    STRING  INSTALLPATH, LOGDIR, BINDIR, ARCGISBIN, AGXBIN;

begin   

	// Get properties for function from CustomActionData
	nvSize = 256;		
    if (MsiGetProperty(hMSI, "CustomActionData", properties, nvSize) != ERROR_SUCCESS) then
    	MessageBox("Error getting properties for FindReplace function", SEVERE);
    	abort;
    endif;
    
    // Initialize list    
    listID = ListCreate (STRINGLIST);
    
    // Get each property into the list.
    if (StrGetTokens (listID, properties, ";") > 0) then
    	// Report the error.
     	MessageBox ("StrGetTokens failed.", SEVERE);
     	abort;
    endif;
    
    // Populate local property values
    ListGetFirstString ( listID, INSTALLPATH );
    ListGetNextString ( listID, LOGDIR );
    ListGetNextString ( listID, BINDIR );
   
    
    // Remove the list from memory.
    ListDestroy (listID);
        
    // Add files to patch to fileArray
    fileArray(0) = BINDIR^"CswClient.properties";
    fileArray(1) = BINDIR^"CswClient.properties";
            
    // Set the line identifier string for each file.
    fromArray(0) = "logFolder=";
    fromArray(1) = "dataFolder=";
      
    // Set the replacement line for each file
    toArray(0) = "logFolder=" + LOGDIR^"CswClient.log";
    toArray(1) = "dataFolder=" + INSTALLPATH^"Data";
    
    
    i=0;          
	while (i < SizeOf(fileArray))	 
		TARGET_FILE = fileArray(i);
        szReplaceFrom = fromArray(i);     //  szFromStr 
        
        //Replace String 
    	szReplaceStr = toArray(i);       //szToStr
		//MessageBox("File: " + TARGET_FILE + " From: " + szReplaceFrom + " To: " + szReplaceStr, 0);
    	_FileDelete_N_AddLine(TARGET_FILE, szReplaceFrom, szReplaceStr, hMSI);                                                     
        	
    	i = i + 1;
    endwhile; 
                                                  
end;



// Function finds and replaces identical text in multiple files
export prototype Fn_FindReplaceArcGISBin(HWND);  

function Fn_FindReplaceArcGISBin(hMSI)
    STRING  fileArray(2), fromArray(2), toArray(2), TARGET_FILE, svReturnLine, szReplaceStr, szReplaceFrom, properties, svNumString;
    NUMBER  i, nvResult, nvSize, nvLineNum;
    LIST   listID;

    // Add local varaibles here
    STRING  INSTALLPATH, LOGDIR, ARCGISBIN;

begin   

	// Get properties for function from CustomActionData
	nvSize = 256;		
    if (MsiGetProperty(hMSI, "CustomActionData", properties, nvSize) != ERROR_SUCCESS) then
    	MessageBox("Error getting properties for FindReplace function", SEVERE);
    	abort;
    endif;
    
    // Initialize list    
    listID = ListCreate (STRINGLIST);
    
    // Get each property into the list.
    if (StrGetTokens (listID, properties, ";") > 0) then
    	// Report the error.
     	MessageBox ("StrGetTokens failed.", SEVERE);
     	abort;
    endif;
    
    // Populate local property values
    ListGetFirstString ( listID, INSTALLPATH );
    ListGetNextString ( listID, LOGDIR );
    ListGetNextString ( listID, ARCGISBIN );    
    
    // Remove the list from memory.
    ListDestroy (listID);
        
    // Add files to patch to fileArray   
    fileArray(0) = ARCGISBIN^"CswClient.properties";
    fileArray(1) = ARCGISBIN^"CswClient.properties";   
         
    // Set the line identifier string for each file.
    fromArray(0) = "logFolder=";
    fromArray(1) = "dataFolder=";   
   
    // Set the replacement line for each file
    toArray(0) = "logFolder=" + LOGDIR^"CswClient.log";
    toArray(1) = "dataFolder=" + INSTALLPATH^"Data";    
    
    i=0;          
	while (i < SizeOf(fileArray))	 
		TARGET_FILE = fileArray(i);
        szReplaceFrom = fromArray(i);     //  szFromStr 
        
        //Replace String 
    	szReplaceStr = toArray(i);       //szToStr
		//MessageBox("File: " + TARGET_FILE + " From: " + szReplaceFrom + " To: " + szReplaceStr, 0);
    	_FileDelete_N_AddLine(TARGET_FILE, szReplaceFrom, szReplaceStr, hMSI);                                                     
        	
    	i = i + 1;
    endwhile; 
                                                  
end;


// Function finds and replaces identical text in multiple files
export prototype Fn_FindReplaceAGXBin(HWND);  

function Fn_FindReplaceAGXBin(hMSI)
    STRING  fileArray(2), fromArray(2), toArray(2), TARGET_FILE, svReturnLine, szReplaceStr, szReplaceFrom, properties, svNumString;
    NUMBER  i, nvResult, nvSize, nvLineNum;
    LIST   listID;

    // Add local varaibles here
    STRING  INSTALLPATH, LOGDIR, AGXBIN;

begin   

	// Get properties for function from CustomActionData
	nvSize = 256;		
    if (MsiGetProperty(hMSI, "CustomActionData", properties, nvSize) != ERROR_SUCCESS) then
    	MessageBox("Error getting properties for FindReplace function", SEVERE);
    	abort;
    endif;
    
    // Initialize list    
    listID = ListCreate (STRINGLIST);
    
    // Get each property into the list.
    if (StrGetTokens (listID, properties, ";") > 0) then
    	// Report the error.
     	MessageBox ("StrGetTokens failed.", SEVERE);
     	abort;
    endif;
    
    // Populate local property values
    ListGetFirstString ( listID, INSTALLPATH );
    ListGetNextString ( listID, LOGDIR );
    ListGetNextString ( listID, AGXBIN );
    
    // Remove the list from memory.
    ListDestroy (listID);
        
    // Add files to patch to fileArray
    fileArray(0) = AGXBIN^"CswClient.properties";
    fileArray(1) = AGXBIN^"CswClient.properties";
   
         
    // Set the line identifier string for each file.
    fromArray(0) = "logFolder=";
    fromArray(1) = "dataFolder=";
       
    // Set the replacement line for each file
    toArray(0) = "logFolder=" + LOGDIR^"CswClient.log";
    toArray(1) = "dataFolder=" + INSTALLPATH^"Data";
    
    i=0;          
	while (i < SizeOf(fileArray))	 
		TARGET_FILE = fileArray(i);
        szReplaceFrom = fromArray(i);     //  szFromStr 
        
        //Replace String 
    	szReplaceStr = toArray(i);       //szToStr
		//MessageBox("File: " + TARGET_FILE + " From: " + szReplaceFrom + " To: " + szReplaceStr, 0);
    	_FileDelete_N_AddLine(TARGET_FILE, szReplaceFrom, szReplaceStr, hMSI);                                                     
        	
    	i = i + 1;
    endwhile; 
                                                  
end;




export prototype Fn_RemoveFile(HWND);  

function Fn_RemoveFile(hMSI)


begin
	//DeleteFile("C:\\CswConfigPath.properties");

end;



// Changes path format for reg files.
// Create property: INSTALLDIR_FS
// Put variables in paths in reg files.
// Put custom action after Install Welcome in 
// User Interface sequence.
export prototype Fn_ChangePathFormat(HWND);

function Fn_ChangePathFormat(hMSI)
	STRING properties, INSTALLPATH;  
	NUMBER nvSize, nError;
	LIST   listID;
	
begin 
     
  	nvSize = 256;
	
    INSTALLPATH = INSTALLDIR;
        
    //MessageBox("Install path: " + INSTALLPATH, INFORMATION);
        
    // Change paths        
    StrReplace (INSTALLPATH, "\\", "/", 0);
     
    //MessageBox("Install path: " + INSTALLPATH, INFORMATION);
    
    // Set property in MSI database    
    MsiSetProperty(hMSI, "INSTALLDIR_FS", INSTALLPATH);    
       
end;



export prototype FolderBrowseLogLoc(HWND); 
function FolderBrowseLogLoc(hMSI)

STRING svFolder;

begin 

	FolderBrowse(svFolder, "Select log location", hMSI);

    //MessageBox("Selected folder:\n\n" + svFolder, 0);
    if (StrLength(svFolder) > 0) then
    	MsiSetProperty(hMSI,"LOGDIR",svFolder);
    endif;
     
end;  


export prototype CreateDirectory(HWND);

function CreateDirectory(hMSI)
	STRING szPath, svError;
	NUMBER nvSize, nError;
begin          
	nvSize=256;
    MsiGetProperty(hMSI, "LOGDIR", szPath, nvSize);
    if (ExistsDir ( szPath ) < 0) then 
    	nError = CreateDir(szPath);
    	if (nError < 0) then
    		svError = FormatMessage(nError);
    		MessageBox("Error creating Log Directory " + szPath + ". \n" + svError, SEVERE);	     		
    	endif;
    endif; 
    
end;



export prototype ProcessEAZFile(HWND); 

function ProcessEAZFile(hMSI)
	STRING szSupportDir, properties, INSTALLPATH, LOGDIR, szProgram, szCmdLine, svArchiveFile, svStringFile, szPath;
	STRING TARGET_FILE,szSearchStr,szNewString;
	NUMBER nLength, nOptions;
	LIST listID;
begin
   
  	nLength = MAX_PATH + 1;
	
	// Get properties for function from CustomActionData
	if (MsiGetProperty(hMSI, "CustomActionData", properties, nLength) != ERROR_SUCCESS) then
    	MessageBox("Error getting properties for FindReplace function", SEVERE);
    	abort;
    endif;
    
    // Initialize list    
    listID = ListCreate (STRINGLIST);
    
    // Get each property into the list.
    if (StrGetTokens (listID, properties, ";") > 0) then
    	// Report the error.
     	MessageBox ("StrGetTokens failed.", SEVERE);
     	abort;
    endif;
    
    // Populate local property values
    ListGetFirstString ( listID, INSTALLPATH );
    ListGetNextString ( listID, szSupportDir );
    ListGetNextString ( listID, LOGDIR );
    
    // Remove the list from memory.
    ListDestroy (listID);
    
    //MessageBox("Installdir: " + INSTALLPATH + " Support dir: " + szSupportDir, 0);
    
    // Extract .eaz file.
    szProgram = szSupportDir^"7za.exe";
	nOptions = WAIT;
	        	 
	svStringFile = "CswClient.properties";
	svArchiveFile = INSTALLPATH^"CSWSearchDockWindow\\CSWSearchDockWindow.eaz";
	szPath = szSupportDir;					
 	szCmdLine = "e \"" + svArchiveFile + "\" -o\"" + szPath + "\" " + svStringFile;       													
	//MessageBox("CommandLine1: " + szCmdLine, 0);
	if (LaunchAppAndWait ( szProgram, szCmdLine, nOptions ) < 0) then
		MessageBox ("Error extracting .eaz file: " + "\nProgram: " + szProgram+ "\nCommandLine: " + szCmdLine, WARNING);
	endif;
	
	// Update properties file
	TARGET_FILE = szPath^svStringFile;
	szSearchStr = "dataFolder=";
	szNewString = "dataFolder=" + INSTALLPATH^"Data";
	
	_FileDelete_N_AddLine(TARGET_FILE,szSearchStr,szNewString,hMSI);
	
	szSearchStr = "logFolder=";
	szNewString = "logFolder=" + LOGDIR^"CswClient.log";
	
	_FileDelete_N_AddLine(TARGET_FILE,szSearchStr,szNewString,hMSI); 
	
	// Update .eaz file
	szCmdLine = "u \"" + svArchiveFile + "\" \""  + szPath^svStringFile + "\"";       													
	//MessageBox("CommandLine3: " + szCmdLine, 0);
	if (LaunchAppAndWait ( szProgram, szCmdLine, nOptions ) < 0) then
		MessageBox ("Error updating .eaz file: " + "\nProgram: " + szProgram+ "\nCommandLine: " + szCmdLine, WARNING);
	endif; 	
	  		
end; 



// INTERNAL FUNCTIONS  

function FolderBrowse(svFolder, svDesc, hMSI)
	STRING szSupportDir, szProductName, szWindowTitle;
	NUMBER nLength;
	OBJECT dotNetDll;
begin
   
  	nLength = MAX_PATH + 1;
	MsiGetProperty(hMSI, "SUPPORTDIR", szSupportDir, nLength);
	MsiGetProperty(hMSI, "ProductName", szProductName, nLength);

	szWindowTitle = szProductName + " - Installshield Wizard";
	//MessageBox("Support Dir: " + szSupportDir + "\nProduct name: " + szProductName, INFORMATION); 

	set dotNetDll = CoCreateObjectDotNet(szSupportDir ^ "InstallUtils.dll", "InstallUtils.Dialogs");   
	dotNetDll.WindowTitle = szWindowTitle;
	// BrowseForFolder(string desc, string initDir)
	svFolder = dotNetDll.BrowseForFolder("Select folder");
	//MessageBox("Folder = " + svFolder, INFORMATION);
end; 



function  _FileDelete_N_AddLine(TARGET_FILE,szSearchStr,szNewString,hMSI)
          
STRING svReturnLine,szMsg,szLocation,svNumString,svReturnString;
NUMBER nvResult, nvLineNumber,iCount,nvSize; 

begin	
	
	// Find the search string in the source file
	nvResult = FileGrep (TARGET_FILE, szSearchStr, svReturnLine,nvLineNumber, RESTART);

	NumToStr(svNumString, nvLineNumber );
       // MessageBox ("Found file. " + TARGET_FILE + " line :"+svNumString, WARNING);

	switch(nvResult)
    	case FILE_NOT_FOUND:
        	// Report error; then abort.     
        	MessageBox( TARGET_FILE + " not found.", WARNING);
        	abort;
    	case FILE_LINE_LENGTH:
        	// Report error; then abort.
        	MessageBox (TARGET_FILE + "lines too long.", WARNING);
        	abort;
    	case OTHER_FAILURE:
        	// Report error; then abort.
        	MessageBox (TARGET_FILE + "Unknown failure on call to FileGrep.",
                   		WARNING);
        	abort;
		case 0:
		    // Delete the line with the search string.
		    if (FileDeleteLine (TARGET_FILE, nvLineNumber, nvLineNumber) < 0) then
				MessageBox ("Failed on call to FileDeleteLine.", SEVERE);
				abort;
        	endif;
			 // Insert the new string.
	    	if (FileInsertLine (TARGET_FILE, szNewString, nvLineNumber, BEFORE) < 0) then
	        	// Report an error.
	        	MessageBox ("Failed on call to FileInsertLine.", SEVERE);
    		endif;
    endswitch;    	
    	   
end;