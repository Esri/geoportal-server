/* See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * Esri Inc. licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ESRI.ArcGIS.Geodatabase;
using ESRI.ArcGIS.Geoprocessor;
using ESRI.ArcGIS.ConversionTools;
using System.Net;
using System.IO;
using System.Windows.Forms;
namespace com.esri.gpt.publish
{
    /// <summary>
    /// Helper class with geoprocessing functions.
    /// </summary>
    public static class GpHelper
    {
        /// <summary>
        /// The geoprocessor object used to execute geoprocessing tools.
        /// The track cancel object allows geoprocessing to be interrupted.
        /// </summary>
        static private int retVal;
        static private Geoprocessor geoprocessor;
        static private object MaxSeverityErrCode = esriGPMessageSeverity.esriGPMessageSeverityError;

        /// <summary>
        /// Class constructor handles instantiation of a GeoProcessor
        /// </summary>
        static GpHelper()
        {
            if (geoprocessor == null)
                geoprocessor = new Geoprocessor();    // this takes a few seconds...

            // Instruct the geoprocessing engine to not add output to
            // the map document, but allow it to overwrite GP output.
            geoprocessor.AddOutputsToMap = false;
            geoprocessor.OverwriteOutput = true;
        }

        /// <summary>
        /// Private wrapper used to execute an IGPProcess gpTool, returning either zero
        /// if the tool's execution succeedes without any errors or the MaxSeverityErrCode
        /// if one or more errors are realized by the geoprocessor.
        /// param name="gpTool" the geoprocessing tool
        /// </summary>
        static private void Execute(IGPProcess gpTool)
        {
            geoprocessor.Execute(gpTool, null);

            if (geoprocessor.MaxSeverity < (int)MaxSeverityErrCode)
                retVal = 0;
            else
                retVal = geoprocessor.MaxSeverity;
        }

        /// <summary>
        /// Public wrapper used to execute an instantiated ESRITranslator geoprocessing tool.
        /// The wrapper's try/catch block contains an error message identifying the type of tool.
        /// param name="gpTool" the geoprocessing tool
        /// param name="xmlFilePaths" the xml file paths
        /// </summary>
        static public int Execute(ESRITranslator gpTool, out string[] xmlFilePaths)
        {
            // Instantiate a new string array and set the anticipated paths
            // into the array. Invoking method is  responsible for cleanup
            // once it has processed the files generated by this method.
            xmlFilePaths = new string[3];
            xmlFilePaths[0] = gpTool.source.ToString();  // Original XML
            xmlFilePaths[1] = gpTool.output.ToString();  // Translated XML
            xmlFilePaths[2] = gpTool.logfile.ToString(); // Translation Log

            try
            {
                Execute(gpTool as IGPProcess);
            }
            catch (Exception ex)
            {
              
            }

            return retVal;
        }
        /// <summary>
        /// Public wrapper used to execute an instantiated MDPublisher geoprocessing tool.
        /// The wrapper's try/catch block contains an error message identifying the type of tool.
        ///param name="gpTool" the geoprocessing tool
        ///param name="publicationResults" the publication results
        /// </summary>
        static public int Execute(MDPublisher gpTool, out string[] publicationResults)
        {
            publicationResults = new string[1];
            object PubMaxSeverityErrCode = esriGPMessageSeverity.esriGPMessageSeverityInformative;
            try
            {
                Execute(gpTool as IGPProcess);
                if (geoprocessor.MaxSeverity >= (int)PubMaxSeverityErrCode)
                {
                    publicationResults[0] = geoprocessor.GetMessages(ref PubMaxSeverityErrCode);
                    retVal = -1;
                }
            }
            catch (Exception ex)
            {
                StringBuilder sb = new StringBuilder();
                sb.AppendLine("Unexpected exception generated by geoprocessing tool");
                sb.AppendLine("Metadata Publisher (Conversion Tools - Metadata)");
                sb.AppendLine("");
                sb.AppendLine(ex.Message);

                MessageBox.Show(sb.ToString(), "Publication Failure",
                    MessageBoxButtons.OK, MessageBoxIcon.Warning);

                retVal = -1;
            }

            return retVal;
        }
        /// <summary>
        /// Public wrapper used to execute an instantiated ImportMetadata geoprocessing tool.
        /// The wrapper's try/catch block contains an error message identifying the type of tool.
        ///param name="gpTool" the geoprocessing tool
        ///param name="xmlFilePaths" the xml file paths
        /// </summary>
        static public int Execute(ImportMetadata gpTool, out string[] xmlFilePaths)
        {
            // Instantiate a new string array and set the anticipated paths
            // into the array. Invoking method is  responsible for cleanup
            // once it has processed the files generated by this method.
            xmlFilePaths = new string[3];
            xmlFilePaths[0] = gpTool.Source_Metadata.ToString();  // Original XML
            xmlFilePaths[1] = gpTool.Output_Metadata.ToString();  // Translated XML

            try
            {
                Execute(gpTool as IGPProcess);
            }
            catch (Exception ex)
            {
                StringBuilder sb = new StringBuilder();
                sb.AppendLine("Unexpected exception generated by geoprocessing tool");
                sb.AppendLine("Metadata Translator (Conversion Tools - Metadata)");
                sb.AppendLine("");
                sb.AppendLine(ex.Message);

                MessageBox.Show(sb.ToString(), "Translation Failure",
                    MessageBoxButtons.OK, MessageBoxIcon.Warning);

                retVal = -1;
            }

            return retVal;
        }
        /// <summary>
        /// Returns an instantiated ESRITranslator geoprocessing tool with input
        /// and output parameters set to the specified values.
        /// param name="inFile" input file to be translated
        /// </summary>
        static public ESRITranslator xmlTranslator(string inFile,string translatorPath)
        {
            // Assign/Create the temporary files for translation output
            string outFile = Path.GetTempFileName();
            string logFile = Path.GetTempFileName();
            
            // Identify the XSL transformation to be used
            string xslTranslator = Path.Combine(Globals.ArcGISInstallationFolderFromCommandLine,
                translatorPath);

            // Instantiate the geoprocessing tool and define its parameters
            // Usage: ESRITranslator_conversion <source> <translator> <output> <logfile>
            ESRITranslator mdTranslator = new ESRITranslator();
            mdTranslator.source = inFile;
            if (xslTranslator.Trim().Length > 0)
            {
                mdTranslator.translator = xslTranslator;        // ""
            }
            else
            {
                mdTranslator.translator = "";
            }
            mdTranslator.output = outFile;
            mdTranslator.logfile = logFile;

            return mdTranslator;
        }
        /// <summary>
        /// Returns an instantiated ESRITranslator geoprocessing tool with input
        /// and output parameters set to the specified values.
        /// param name="inFile" the input file
        /// param name="xmlFileName" the xml file name
        /// param name="xsltFile" the xslt file
        /// </summary>
        static public ESRITranslator xmlTranslator(string inFile, String xsltFile, String xmlFileName)
        {
            // Assign/Create the temporary files for translation output
            string outFile = xmlFileName;
            string logFile = Path.GetTempFileName();

            // Identify the XSL transformation to be used
            string xslTranslator = xsltFile;

            // Instantiate the geoprocessing tool and define its parameters
            // Usage: ESRITranslator_conversion <source> <translator> <output> <logfile>
            ESRITranslator mdTranslator = new ESRITranslator();
            mdTranslator.source = inFile;
            mdTranslator.translator = xslTranslator;
            mdTranslator.output = outFile;
            mdTranslator.logfile = logFile;

            return mdTranslator;
        }
        /// <summary>
        /// Returns an instantiated MDPublisher geoprocessing tool with input
        /// and output parameters set to the specified values.
        /// param name="inFile" the input file
        /// param name="mdFileID" a file identifier (like source uri)
        /// param name="param" the publication parameters
        /// </summary>
        static public MDPublisher xmlPublisher(string inFile, string mdFileID, PublicationParams param)
        {
          
            // Instantiate the geoprocessing tool and define its parameters
            // Usage: MDPublisher_conversion <source> <publisher> <url> <service> <user> <password>
            MDPublisher mdPublisher = new MDPublisher();
            mdPublisher.source = inFile;
            mdPublisher.publisher = param.CurrentWorkDir;
            mdPublisher.url = param.ServerUrl;
            mdPublisher.service = param.Service + ":EB:" + mdFileID;
            mdPublisher.user = param.UserName;
            mdPublisher.password = param.Password;
            return mdPublisher;
        }
        /// <summary>
        /// Returns an instantiated ImportMetadata geoprocessing tool with input
        /// and output parameters set to the specified values.
        /// param name="inFile" the input file
        /// param name="xmlFileName" the xml file name
        /// </summary>
        static public ImportMetadata xmlImporter(string inFile, String xmlFileName)
        {
            // Assign/Create the temporary files for translation output
            string outFile = xmlFileName;
            string logFile = Path.GetTempFileName();

            // Instantiate the geoprocessing tool and define its parameters
            // Usage: MDImporter_conversion <source> <output>
            ImportMetadata mdImporter = new ImportMetadata();
            mdImporter.Source_Metadata = inFile;
            mdImporter.Output_Metadata = outFile;

            return mdImporter;
        }

    }
}
